
def xbibGroup = 'hbz.xbib'
def xbibVersion = '2.0'
def xbibBuildNumber = System.getenv("BUILD_NUMBER") as Integer ?: 0

group = xbibGroup
version = xbibVersion + '.' + xbibBuildNumber + '-HBZ-SNAPSHOT'

println "Host: " + java.net.InetAddress.getLocalHost()
println "Gradle: " + gradle.gradleVersion + " JVM: " + org.gradle.internal.jvm.Jvm.current() + " Groovy: " + GroovySystem.getVersion()
println "Build: group: '${project.group}', name: '${project.name}', version: '${project.version}'"
println "Timestamp: " + java.time.Instant.now().atZone(java.time.ZoneId.systemDefault()).toString()

ext {
  versions = [
    'xbib-elasticsearch' : '2.2.1.1',
    'jackson': '2.6.5',
    'netty': '4.0.34.Final',
    'woodstox' : '5.0.2',
    'log4j': '2.5',
    'gradle-plugin-jflex': '1.1.0',
    'gradle-plugin-jacc': '1.1.3',
    'wikidata' : '0.6.0'
  ]
}

allprojects {
    apply plugin: 'maven'
    group = xbibGroup
    version = xbibVersion + '.' + xbibBuildNumber + '-SNAPSHOT'
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            url "http://xbib.org/repository"
        }
    }
    configurations {
        wagon
        deployerJars
    }
    dependencies {
        wagon 'org.apache.maven.wagon:wagon-ssh-external:2.10'
        deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
    }
}

subprojects {
    apply plugin: 'java'
    //apply plugin: 'findbugs'
    configurations {
        provided
        testCompile.extendsFrom(provided)
    }
    sourceSets {
        main.compileClasspath += configurations.provided
        test.compileClasspath += configurations.provided
        test.runtimeClasspath += configurations.provided
    }

    dependencies {
        compile "org.apache.logging.log4j:log4j-core:${versions.log4j}"
        provided "org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j}"
        testCompile('junit:junit:4.12') {
            exclude group: 'org.hamcrest'
        }
        testCompile('org.mockito:mockito-core:1.9.5') {
            exclude group: 'org.hamcrest'
        }
        testCompile 'org.hamcrest:hamcrest-all:1.3'
    }
    compileJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
    test {
        classpath += configurations.provided
        testLogging {
            showStandardStreams = false
            exceptionFormat = 'full'
        }
    }
    /*tasks.withType(FindBugs) {
        ignoreFailures = true
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }*/
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        archives sourcesJar
    }
    uploadArchives {
        repositories.mavenDeployer {
            name = 'sshDeployer' // optional
            configuration = configurations.deployerJars
            repository(url: "scp://myhost/mypath") {
                authentication(userName: "myusername", password: "mypassword")
            }
        }
        dependsOn {
            rootProject.subprojects.collect {
                it.tasks.getByName 'test'
            }
        }
    }
}
