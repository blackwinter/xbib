package org.xbib.stream.delegates;

import org.xbib.stream.Stream;
import org.xbib.stream.generators.Generator;

/**
 * A {@link Stream} of elements generated by the elements of an input {@link Stream}
 *
 * @param <E1> the type of elements of the input stream
 * @param <E2> the type of stream elements
 */
public class PipedStream<E1, E2> extends AbstractDelegateStream<E1, E2> {

    private final Generator<E1, E2> generator;

    /**
     * Creates an instance with a {@link Stream} and an element {@link Generator}.
     *
     * @param stream    the stream
     * @param generator the generator
     * @throws IllegalArgumentException if the stream or the generator are <code>null</code>
     */
    public PipedStream(Stream<E1> stream, Generator<E1, E2> generator) throws IllegalArgumentException {

        super(stream);

        if (generator == null) {
            throw new IllegalArgumentException("invalid null generator");
        }

        this.generator = generator;
    }

    @Override
    protected E2 delegateNext() {
        return generator.yield(stream().next());
    }

    @Override
    protected boolean delegateHasNext() {
        return stream().hasNext();
    }
}
