package org.xbib.sql.parser.expression;

import org.xbib.sql.parser.expression.operators.arithmetic.Addition;
import org.xbib.sql.parser.expression.operators.arithmetic.BitwiseAnd;
import org.xbib.sql.parser.expression.operators.arithmetic.BitwiseOr;
import org.xbib.sql.parser.expression.operators.arithmetic.BitwiseXor;
import org.xbib.sql.parser.expression.operators.arithmetic.Concat;
import org.xbib.sql.parser.expression.operators.arithmetic.Division;
import org.xbib.sql.parser.expression.operators.arithmetic.Multiplication;
import org.xbib.sql.parser.expression.operators.arithmetic.Subtraction;
import org.xbib.sql.parser.expression.operators.conditional.AndExpression;
import org.xbib.sql.parser.expression.operators.conditional.OrExpression;
import org.xbib.sql.parser.expression.operators.relational.Between;
import org.xbib.sql.parser.expression.operators.relational.EqualsTo;
import org.xbib.sql.parser.expression.operators.relational.ExistsExpression;
import org.xbib.sql.parser.expression.operators.relational.GreaterThan;
import org.xbib.sql.parser.expression.operators.relational.GreaterThanEquals;
import org.xbib.sql.parser.expression.operators.relational.InExpression;
import org.xbib.sql.parser.expression.operators.relational.IsNullExpression;
import org.xbib.sql.parser.expression.operators.relational.LikeExpression;
import org.xbib.sql.parser.expression.operators.relational.Matches;
import org.xbib.sql.parser.expression.operators.relational.MinorThan;
import org.xbib.sql.parser.expression.operators.relational.MinorThanEquals;
import org.xbib.sql.parser.expression.operators.relational.NotEqualsTo;
import org.xbib.sql.parser.schema.Column;
import org.xbib.sql.parser.statement.select.SubSelect;

public interface ExpressionVisitor {
	void visit(NullValue nullValue);
	void visit(Function function);
	void visit(InverseExpression inverseExpression);
	void visit(JdbcParameter jdbcParameter);
	void visit(DoubleValue doubleValue);
	void visit(LongValue longValue);
	void visit(DateValue dateValue);
	void visit(TimeValue timeValue);
	void visit(TimestampValue timestampValue);
	void visit(Parenthesis parenthesis);
	void visit(StringValue stringValue);
	void visit(Addition addition);
	void visit(Division division);
	void visit(Multiplication multiplication);
	void visit(Subtraction subtraction);
	void visit(AndExpression andExpression);
	void visit(OrExpression orExpression);
	void visit(Between between);
	void visit(EqualsTo equalsTo);
	void visit(GreaterThan greaterThan);
	void visit(GreaterThanEquals greaterThanEquals);
	void visit(InExpression inExpression);
	void visit(IsNullExpression isNullExpression);
	void visit(LikeExpression likeExpression);
	void visit(MinorThan minorThan);
	void visit(MinorThanEquals minorThanEquals);
	void visit(NotEqualsTo notEqualsTo);
	void visit(Column tableColumn);
	void visit(SubSelect subSelect);
	void visit(CaseExpression caseExpression);
	void visit(WhenClause whenClause);
	void visit(ExistsExpression existsExpression);
	void visit(AllComparisonExpression allComparisonExpression);
	void visit(AnyComparisonExpression anyComparisonExpression);
	void visit(Concat concat);
	void visit(Matches matches);
	void visit(BitwiseAnd bitwiseAnd);
	void visit(BitwiseOr bitwiseOr);
	void visit(BitwiseXor bitwiseXor);
}
